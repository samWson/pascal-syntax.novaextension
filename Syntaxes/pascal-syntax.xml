<?xml version="1.0" encoding="UTF-8"?>
<syntax name="pascal">
    <meta>
        <name>Pascal</name>
        <type>compiled</type>
        <preferred-file-extension>pas</preferred-file-extension>
    </meta>

    <detectors>
        <extension priority="1.0">pas,lpr,pp,inc</extension>
    </detectors>

    <indentation>
        <increase>
            <expression>(\s*begin$)|(\s*BEGIN$)</expression>
        </increase>
        <decrease>
            <expression>(\s*end$)|(\s*END$)</expression>
        </decrease>
    </indentation>

    <comments>
        <single>
            <expression>//</expression>
        </single>
        <multiline>
            <starts-with>
                <expression>(*</expression>
            </starts-with>
            <ends-with>
                <expression>*)</expression>
            </ends-with>
        </multiline>
        <multiline>
            <starts-with>
                <expression>{</expression>
            </starts-with>
            <ends-with>
                <expression>}</expression>
            </ends-with>
        </multiline>
    </comments>

    <brackets>
        <pair open="[" close="]" />
        <pair open="(" close=")" />
    </brackets>

    <surrounding-pairs>
        <pair open="'" close="'" />
        <pair open="{" close="}" />
        <pair open="[" close="]" />
        <pair open="(" close=")" />
    </surrounding-pairs>

    <scopes>
        <include syntax="self" collection="comments" />
        <include syntax="self" collection="programs" />
        <include syntax="self" collection="units" />
    </scopes>

    <collections>
        <collection name="comments">
            <scope name="pascal.comment.single" spell-check="true">
                <expression>\/\/(.*)$</expression>
                <capture number="1" name="pascal.comment.content" />
            </scope>
            <scope name="pascal.comment.block.parentheses" spell-check="true">
                <starts-with>
                    <expression>\(\*</expression>
                </starts-with>
                <ends-with>
                    <expression>\*\)</expression>
                </ends-with>
            </scope>
            <scope name="pascal.comment.block.braces" spell-check="true">
                <starts-with>
                    <expression>{</expression>
                </starts-with>
                <ends-with>
                    <expression>}</expression>
                </ends-with>
            </scope>
        </collection>
        <collection name="programs">
            <scope name="pascal.program">
                <starts-with>
                    <expression>^\s*(?i)(program)\s+([_a-zA-Z]{1}[\w\d]*)\s*;</expression>
                    <capture number="1" name="pascal.keyword.statement.program" />
                    <capture number="2" name="pascal.identifier" />
                </starts-with>
                <ends-with>
                    <expression>(?i)(end)\.</expression>
                    <capture number="1" name="pascal.keyword.program.end" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="comments" />
                    <include syntax="self" collection="uses" />
                    <include syntax="self" collection="types" />
                    <include syntax="self" collection="constants" />
                    <include syntax="self" collection="variables" />
                    <include syntax="self" collection="functions" />
                    <include syntax="self" collection="compound-statements" />
                    <include syntax="self" collection="procedures" />
                    <include syntax="self" collection="loop-statements" />
                    <include syntax="self" collection="if-statements" />
                    <include syntax="self" collection="with-statements" />
                    <include syntax="self" collection="strings" />
                    <include syntax="self" collection="case-statements" />
                    <include syntax="self" collection="operators" />
                    <include syntax="self" collection="exceptions" />
                </subscopes>
            </scope>
        </collection>
        <collection name="units">
            <scope name="pascal.unit">
                <symbol type="type" scope="global">
                    <display-name>
                        <component selector="pascal.identifier"/>
                    </display-name>
                </symbol>
                <starts-with>
                    <expression>(?i)(unit)\s+(.+)\s*;</expression>
                    <capture number="1" name="pascal.keyword.statement.unit" />
                    <capture number="2" name="pascal.identifier" />
                </starts-with>
                <ends-with>
                    <expression>(?i)(end)\.</expression>
                    <capture number="1" name="pascal.keyword.unit.end" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="interface" />
                    <include syntax="self" collection="implementation" />
                    <include syntax="self" collection="comments" />
                    <include syntax="self" collection="types" />
                    <include syntax="self" collection="constants" />
                    <include syntax="self" collection="variables" />
                    <include syntax="self" collection="functions" />
                    <include syntax="self" collection="compound-statements" />
                    <include syntax="self" collection="procedures" />
                    <include syntax="self" collection="loop-statements" />
                    <include syntax="self" collection="if-statements" />
                    <include syntax="self" collection="with-statements" />
                    <include syntax="self" collection="strings" />
                    <include syntax="self" collection="case-statements" />
                    <include syntax="self" collection="operators" />
                    <include syntax="self" collection="exceptions" />
                </subscopes>
            </scope>
        </collection>
        <collection name="uses">
            <scope name="pascal.program.uses">
                <expression>\b(?i)(uses)\s+([\w]+.*);</expression>
                <capture number="1" name="pascal.keyword.uses" />
                <capture number="2" name="pascal.keyword.uses.clause" />
            </scope>
        </collection>
        <collection name="types">
            <scope name="pascal.type-declaration">
                <expression>(?i)(type)</expression>
                <capture number="1" name="pascal.keyword.type" />
            </scope>
        </collection>
        <collection name="constants">
            <scope name="pascal.constant-declaration">
                <expression>(?i)(const)</expression>
                <capture number="1" name="pascal.keyword.const" />
            </scope>
        </collection>
        <collection name="variables">
            <scope name="pascal.variable-declaration">
                <expression>(?i)(var)</expression>
                <capture number="1" name="pascaal.keyword.var" />
            </scope>
        </collection>
        <collection name="interface">
            <scope name="pascal.unit.interface">
                <expression>(?i)(interface)</expression>
                <capture number="1" name="pascal.keyword.interface" />
            </scope>
        </collection>
        <collection name="implementation">
            <scope name="pascal.unit.implementation">
                <expression>(?i)(implementation)</expression>
                <capture number="1" name="pascal.keyword.implementation" />
            </scope>
        </collection>
        <collection name="functions">
            <scope name="pascal.function">
                <symbol type="function">
                    <context behavior="subtree" />
                </symbol>
                <expression>(?i)(function)\s+([\w]+)(\(.*\)):\s+([\w]+);</expression>
                <capture number="1" name="pascal.keyword.function" />
                <capture number="2" name="pascal.function.identifier" />
                <capture number="3" name="pascal.function.parameter-list" />
                <capture number="4" name="pascal.function.result-type" />
            </scope>
        </collection>
        <collection name="compound-statements">
            <scope name="pascal.compound-statement">
                <starts-with>
                    <expression>(?i)(begin)</expression>
                    <capture number="1" name="pascal.keyword.begin" />
                </starts-with>
                <ends-with>
                    <expression>(?i)(end)</expression>
                    <capture number="1" name="pascal.keyword.end" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="compound-statements" />
                    <include syntax="self" collection="loop-statements" />
                    <include syntax="self" collection="if-statements" />
                    <include syntax="self" collection="with-statements" />
                    <include syntax="self" collection="strings" />
                    <include syntax="self" collection="case-statements" />
                    <include syntax="self" collection="operators" />
                    <include syntax="self" collection="exceptions" />
                </subscopes>
            </scope>
        </collection>
        <collection name="procedures">
            <scope name="pascal.procedure">
                <symbol type="function">
                    <context behavior="subtree" />
                </symbol>
                <expression>(?i)(procedure)\s+([\w]+)(\(.*\));</expression>
                <capture number="1" name="pascal.keyword.procedure" />
                <capture number="2" name="pascal.procedure.identifier" />
                <capture number="3" name="pascal.procedures.parameter-list" />
            </scope>
        </collection>
        <collection name="loop-statements">
            <scope name="pascal.statement.for.to">
                <expression>(?i)(for)\s+(.+)\s+:=\s+(.+)\s+(to)\s+(.+)\s+(do)</expression>
                <capture number="1" name="pascal.keyword.for" />
                <capture number="2" name="pascal.for.control-variable" />
                <capture number="3" name="pascal.for.initial-value" />
                <capture number="4" name="pascal.keyword.to" />
                <capture number="5" name="pascal.for.final-value" />
                <capture number="6" name="pascal.keyword.do" />
                <subscopes>
                    <include syntax="self" collection="compound-statements" />
                </subscopes>
            </scope>
            <scope name="pascal.statement.for.downto">
                <expression>(?i)(for)\s+(.+)\s+:=\s+(.+)\s+(downto)\s+(.+)\s+(do)</expression>
                <capture number="1" name="pascal.keyword.for" />
                <capture number="2" name="pascal.for.control-variable" />
                <capture number="3" name="pascal.for.initial-value" />
                <capture number="4" name="pascal.keyword.downto" />
                <capture number="5" name="pascal.for.final-value" />
                <capture number="6" name="pascal.keyword.do" />
                <subscopes>
                    <include syntax="self" collection="compound-statements" />
                </subscopes>
            </scope>
            <scope name="pascal.statement.repeat">
                <starts-with>
                    <expression>(?i)(repeat)</expression>
                    <capture number="1" name="pascal.keyword.repeat" />
                </starts-with>
                <ends-with>
                    <expression>(?i)(until)\s+(.+)\s*;</expression>
                    <capture number="1" name="pascal.keyword.until" />
                    <capture number="2" name="pascal.until.expression" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="compound-statements" />
                </subscopes>
            </scope>
            <scope name="pascal.statement.while">
                <expression>(?i)(while)\s+(.+)\s+(do)</expression>
                <capture number="1" name="pascal.keyword.while" />
                <capture number="2" name="pascal.while.expression" />
                <capture number="3" name="pascal.keyword.do" />
                <subscopes>
                    <include syntax="self" collection="compound-statements" />
                </subscopes>
            </scope>
        </collection>
        <collection name="if-statements">
            <scope name="pascal.statement.if">
                <expression>(?i)(if)\s+(.+)\s+(then)</expression>
                <capture number="1" name="pascal.keyword.if" />
                <capture number="2" name="pascal.expression" />
                <capture number="3" name="pascal.keyword.then" />
            </scope>
            <scope name="pascal.statement.else">
                <expression>(?i)(else)</expression>
                <capture number="1" name="pascal.keyword.else" />
            </scope>
        </collection>
        <collection name="with-statements">
            <scope name="pascal.statement.with">
                <expression>(?i)(with)\s+([a-z_]+[a-z_0-9]*)\s+(do)</expression>
                <capture number="1" name="pascal.keyword.with" />
                <capture number="2" name="pascal.identifier" />
                <capture number="3" name="pascal.keyword.do" />
            </scope>
        </collection>
       <collection name="strings">
            <scope name="pascal.string">
                <starts-with>
                    <expression>(')</expression>
                    <capture number="1" name="pascal.syntax.single-quote" />
                </starts-with>
                <ends-with>
                    <expression>(')</expression>
                    <capture number="1" name="pascal.syntax.single-quote" />
                </ends-with>
            </scope>
        </collection>
        <collection name="case-statements">
            <scope name="pascal.statement.case">
                <starts-with>
                    <expression>(?i)(case)\s+(.+)\s+(of)</expression>
                    <capture number="1" name="pascal.keyword.case" />
                    <capture number="2" name="pascal.case.expression" />
                    <capture number="3" name="pascal.keyword.do" />
                </starts-with>
                <ends-with>
                    <expression>(?i)(end);</expression>
                    <capture number="1" name="pascal.keyword.end" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="compound-statements" />
                </subscopes>
            </scope>
        </collection>
        <collection name="operators">
            <scope name="pascal.operators.boolean.and">
                <expression>(?i)\b(and)\b</expression>
                <capture number="1" name="pascal.keyword.operator.and" />
            </scope>
            <scope name="pascal.operators.boolean.or">
              <expression>(?i)\b(or)\b</expression>
              <capture number="1" name="pascal.keyword.operator.or" />
            </scope>
            <scope name="pascal.operators.boolean.not">
              <expression>(?i)\b(not)\b</expression>
              <capture number="1" name="pascal.keyword.operator.not" />
            </scope>
            <scope name="pascal.operators.boolean.xor">
              <expression>(?i)\b(xor)\b</expression>
              <capture number="1" name="pascal.keyword.operator.xor" />
            </scope>
        </collection>
        <collection name="exceptions">
            <scope name="pascal.statement.raise">
              <expression>(?i)\b(raise)\b</expression>
              <capture number="1" name="pascal.keyword.condition.raise" />
            </scope>
        </collection>
    </collections>
</syntax>
